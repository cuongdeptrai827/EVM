
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <malloc.h>
#define MAX_SIZE 100

void findDuplicates(int* arr, int* result, int n) {
    __asm__ (
            "movl %0, %%ecx\n"    // di chuyển n vào ecx
            "movl %1, %%esi\n"    // di chuyển arr vào esi
            "movl %2, %%edi\n"    // di chuyển result vào edi
            "xorl %%edx, %%edx\n" // xóa edx
            "outer_loop:\n"       // vòng lặp ngoài
            "cmpl %%edx, %%ecx\n" // so sánh edx và ecx
            "jge outer_loop_end\n" // nhảy nếu lớn hơn hoặc bằng
            "movl (%%esi,%%edx,4), %%eax\n" // load arr[edx] vào eax
            "movl (%%edi,%%eax,4), %%ebx\n" // load result[arr[edx]] vào ebx
            "incl %%ebx\n"        // tăng ebx lên 1
            "movl %%ebx, (%%edi,%%eax,4)\n" // lưu ebx vào result[arr[edx]]
            "incl %%edx\n"        // tăng edx lên 1
            "jmp outer_loop\n"    // nhảy đến outer_loop
            "outer_loop_end:\n"   // nhãn kết thúc vòng lặp ngoài
            :
            : "g"(n), "g"(arr), "g"(result) // các toán hạng đầu vào
            : "eax", "ebx", "ecx", "edx", "esi", "edi" // các thanh ghi bị ảnh hưởng
            );
}


int main() {
    int* arr = (int*)malloc(MAX_SIZE * sizeof(int));
    int* result = (int*)malloc(MAX_SIZE * sizeof(int));
    int n = 0;

    FILE* input_file = fopen("INPUT.txt", "r");
    if (input_file == NULL) {
        printf("ERROR: Could not open input.txt\n");
        return 1;
    }

    while (fscanf(input_file, "%d", &arr[n]) == 1 && n < MAX_SIZE) {
        result[n] = 0;
        n++;
    }

    fclose(input_file);

    findDuplicates(arr, result, n);

    FILE* output_file = fopen("OUTPUTs.txt", "w");
    int flag = 0;

    for (int i = 0; i < n; i++) {
        if (result[i] > 1) {
            flag = 1;
            fprintf(output_file, "%d", i);
            fprintf(output_file, "%s", " - ");
            fprintf(output_file, "%d\n", result[i]);
        }
    }
    if (flag == 0) {
        fprintf(output_file, "%s", "None");
    }

    fclose(output_file);
    free(arr);
    free(result);

    return 0;
}


/*
void findDuplicates(int* arr, int* result, int n) {
    for (int i = 0; i < n; i++) {
        result[arr[i]]++;
    }
}
*/
